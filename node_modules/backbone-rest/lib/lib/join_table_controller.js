// Generated by CoffeeScript 1.7.1
(function() {
  var JSONUtils, JoinTableController, RestController, _, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ref = require('backbone-orm'), _ = _ref._, JSONUtils = _ref.JSONUtils;

  RestController = require('../rest_controller');

  module.exports = JoinTableController = (function(_super) {
    __extends(JoinTableController, _super);

    function JoinTableController() {
      return JoinTableController.__super__.constructor.apply(this, arguments);
    }

    JoinTableController.prototype.create = function(req, res) {
      var err, json;
      try {
        json = JSONUtils.parseDates(this.whitelist.create ? _.pick(req.body, this.whitelist.create) : req.body);
        return this.model_type.exists(json, (function(_this) {
          return function(err, exists) {
            var event_data, model;
            if (err) {
              return _this.sendError(res, err);
            }
            if (exists) {
              _this.sendStatus(res, 409, 'Entry already exists');
            }
            model = new _this.model_type(_this.model_type.prototype.parse(json));
            event_data = {
              req: res,
              res: res,
              model: model
            };
            _this.constructor.trigger('pre:create', event_data);
            return model.save(function(err) {
              if (err) {
                return _this.sendError(res, err);
              }
              event_data.model = model;
              json = _this.whitelist.create ? _.pick(model.toJSON(), _this.whitelist.create) : model.toJSON();
              return _this.render(req, json, function(err, json) {
                if (err) {
                  return _this.sendError(res, err);
                }
                _this.constructor.trigger('post:create', _.extend(event_data, {
                  json: json
                }));
                return res.json(json);
              });
            });
          };
        })(this));
      } catch (_error) {
        err = _error;
        return this.sendError(res, err);
      }
    };

    return JoinTableController;

  })(RestController);

}).call(this);
