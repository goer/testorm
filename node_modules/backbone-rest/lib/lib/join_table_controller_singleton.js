// Generated by CoffeeScript 1.7.1

/*
  backbone-rest.js 0.5.3
  Copyright (c) 2013 Vidigami - https://github.com/vidigami/backbone-rest
  License: MIT (http://www.opensource.org/licenses/mit-license.php)
 */

(function() {
  var JoinTableController, JoinTableControllerSingleton, path, _;

  path = require('path');

  _ = require('backbone-orm')._;

  JoinTableController = null;

  JoinTableControllerSingleton = (function() {
    function JoinTableControllerSingleton() {
      this.join_tables = {};
    }

    JoinTableControllerSingleton.prototype.reset = function() {
      return this.join_tables = {};
    };

    JoinTableControllerSingleton.prototype.generateByOptions = function(app, options) {
      var err, join_table_auth, join_table_endpoint, join_table_options, join_table_parts, join_table_url, key, relation, route_parts, route_root, schema, _i, _key, _len, _ref, _ref1, _ref2, _ref3, _results;
      if (!JoinTableController) {
        JoinTableController = require('./join_table_controller');
      }
      route_parts = options.route.split('/');
      route_parts.pop();
      route_root = route_parts.join('/');
      schema = options.model_type.schema();
      _ref = schema.relations;
      _results = [];
      for (key in _ref) {
        relation = _ref[key];
        if (!(relation && relation.join_table)) {
          continue;
        }
        try {
          join_table_url = _.result(new relation.join_table, 'url');
          join_table_parts = join_table_url.split('/');
          join_table_endpoint = join_table_parts.pop();
        } catch (_error) {
          err = _error;
          console.log("JoinTableControllerSingleton.generateControllers: failed to parse url. Error: " + err);
          continue;
        }
        join_table_options = _.clone(options);
        join_table_options.route = path.join(route_root, join_table_endpoint);
        if (join_table_options.route[0] !== '/') {
          join_table_options.route = "/" + join_table_options.route;
        }
        if (this.join_tables[join_table_options.route]) {
          continue;
        }
        _ref1 = ['whitelist', 'templates', 'default_template'];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          _key = _ref1[_i];
          delete join_table_options[_key];
        }
        join_table_options.model_type = relation.join_table;
        if (join_table_auth = (_ref2 = options.auth) != null ? (_ref3 = _ref2.relations) != null ? _ref3[key] : void 0 : void 0) {
          join_table_options.auth = join_table_auth;
        }
        _results.push(this.join_tables[join_table_options.route] = new JoinTableController(app, join_table_options));
      }
      return _results;
    };

    return JoinTableControllerSingleton;

  })();

  module.exports = new JoinTableControllerSingleton();

}).call(this);
