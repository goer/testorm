// Generated by CoffeeScript 1.7.1

/*
  backbone-rest.js 0.5.3
  Copyright (c) 2013 Vidigami - https://github.com/vidigami/backbone-rest
  License: MIT (http://www.opensource.org/licenses/mit-license.php)
 */

(function() {
  var BackboneEvents, JSONController, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  _ = require('underscore');

  BackboneEvents = (require('backbone')).Events;

  module.exports = JSONController = (function() {
    function JSONController(app, options) {
      if (options == null) {
        options = {};
      }
      this._dynamicAuth = __bind(this._dynamicAuth, this);
      this._reqToCRUD = __bind(this._reqToCRUD, this);
      this._setHeaders = __bind(this._setHeaders, this);
      this.wrap = __bind(this.wrap, this);
      this.configure(options);
      this.headers || (this.headers = {
        'Cache-Control': 'no-cache',
        'Content-Type': 'application/json'
      });
      this.logger || (this.logger = console);
    }

    JSONController.prototype.configure = function(options) {
      if (options == null) {
        options = {};
      }
      return _.extend(this, options);
    };

    JSONController.prototype.sendStatus = function(res, status, message) {
      res.status(status);
      if (message) {
        return res.json({
          message: message
        });
      } else {
        return res.json({});
      }
    };

    JSONController.prototype.sendError = function(res, err) {
      var req;
      req = res.req;
      this.constructor.trigger('error', {
        req: req,
        res: res,
        err: err
      });
      this.logger.error("Error 500 from " + req.method + " " + req.url + ": " + ((err != null ? err.stack : void 0) || err));
      res.status(500);
      return res.json({
        error: err.toString()
      });
    };

    JSONController.prototype.wrap = function(fn) {
      var stack;
      stack = [];
      if (_.isArray(this.auth)) {
        stack = this.auth.slice(0);
      } else if (_.isFunction(this.auth)) {
        stack.push(this.auth);
      } else if (_.isObject(this.auth)) {
        stack.push(this._dynamicAuth);
      }
      stack.push(this._setHeaders);
      stack.push((function(_this) {
        return function(req, res, next) {
          var err, _ref;
          if (_this.blocked) {
            if (_ref = _this._reqToCRUD(req), __indexOf.call(_this.blocked, _ref) >= 0) {
              return _this.sendStatus(res, 405);
            }
          }
          try {
            return fn.call(_this, req, res, next);
          } catch (_error) {
            err = _error;
            return _this.sendError(res, err);
          }
        };
      })(this));
      return stack;
    };

    JSONController.prototype._call = JSONController.prototype.wrap;

    JSONController.prototype.requestValue = function(req, key) {
      if (_.isFunction(req[key])) {
        return req[key]();
      } else {
        return req[key];
      }
    };

    JSONController.prototype._setHeaders = function(req, res, next) {
      var key, value, _ref;
      _ref = this.headers;
      for (key in _ref) {
        value = _ref[key];
        res.setHeader(key, value);
      }
      return next();
    };

    JSONController.prototype._reqToCRUD = function(req) {
      var req_path;
      req_path = this.requestValue(req, 'path');
      if (req_path === this.route) {
        switch (req.method) {
          case 'GET':
            return 'index';
          case 'POST':
            return 'create';
          case 'DELETE':
            return 'destroyByQuery';
          case 'HEAD':
            return 'headByQuery';
        }
      } else if (this.requestId(req) && req_path === ("" + this.route + "/" + (this.requestId(req)))) {
        switch (req.method) {
          case 'GET':
            return 'show';
          case 'PUT':
            return 'update';
          case 'DELETE':
            return 'destroy';
          case 'HEAD':
            return 'head';
        }
      }
    };

    JSONController.prototype._dynamicAuth = function(req, res, next) {
      var auth, crud, exec, index;
      if (this.auth.hasOwnProperty(crud = this._reqToCRUD(req))) {
        auth = this.auth[crud];
      } else {
        auth = this.auth["default"];
      }
      if (!auth) {
        return next();
      }
      if (!_.isArray(auth)) {
        return auth(req, res, next);
      }
      index = -1;
      exec = function() {
        if (++index >= auth.length) {
          return next();
        } else {
          return auth[index](req, res, exec);
        }
      };
      return exec();
    };

    return JSONController;

  })();

  _.extend(JSONController, BackboneEvents);

}).call(this);
